events {
  worker_connections 1024;
}

http {
  ##
  # Cache
  ##
  proxy_buffering           on;
  proxy_cache_path          /var/cache/proxy-nginx levels=1:2 keys_zone=proxy-cache:10m max_size=3g inactive=1d;
  proxy_temp_path           /var/cache/proxy-nginx/tmp;
  proxy_buffer_size         4k;
  proxy_buffers             256 4k;

  ##
  # Basic Settings
  ##
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 5;
  types_hash_max_size 2048;
  server_names_hash_max_size 512;
  server_names_hash_bucket_size 128;

  ##
  # Gzip Settings
  ##
  gzip on;
  gzip_disable "msie6";
  gzip_http_version 1.1;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

  upstream proxyapp {
    server unix:///tmp/puma.sock;
  }

  # The "auto_ssl" shared dict should be defined with enough storage space to
  # hold your certificate data. 1MB of storage holds certificates for
  # approximately 100 separate domains.
  lua_shared_dict auto_ssl 1m;

  # The "auto_ssl_settings" shared dict is used to temporarily store various settings
  # like the secret used by the hook server on port 8999. Do not change or
  # omit it.
  lua_shared_dict auto_ssl_settings 64k;

  lua_ssl_verify_depth 2;
  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.pem;

  # A DNS resolver must be defined for OSCP stapling to function.
  resolver 8.8.8.8 ipv6=off;

  # Initial setup tasks.
  init_by_lua_block {
    auto_ssl = (require "resty.auto-ssl").new()

    local os = require("os")

    -- Store our certificates on redis for fast lookup and durability
    auto_ssl:set("storage_adapter", "resty.auto-ssl.storage_adapters.redis")
    auto_ssl:set("redis", {
      host = os.getenv("REDIS_SSL_HOST"),
      port = os.getenv("REDIS_SSL_PORT"),
      auth = os.getenv("REDIS_SSL_AUTH")
    })

    -- Define a function to determine which SNI domains to automatically handle
    -- and register new certificates for. Defaults to not allowing any domains,
    -- so this must be configured.
    auto_ssl:set("allow_domain", function (domain)
      local http = require("resty.http")
      local httpc = http.new()

      httpc:set_timeout(5000)

      if ngx.re.match(domain, "^(proxy.ericsbookclub.com|system.ericsbookclub.com|app.ericsbookclub.com)$", "ijo") then
        return true
      end

      local uri = "https://system.ericsbookclub.com/domain_check?domain="..domain
      print("Querying api for custom domain: ", uri)

      local res, err = httpc:request_uri(uri, {
        method = "GET"
      })

      if not res then
        print("failed to request: ", err)
        return false
      end

      if res.status == 200 then
        print("Domain is allowed! Status code: ", res.status, " _id: ", res.body)
        return true
      end

      if res.status == 404 then
        print("Domain not found. Status code: ", res.status)
        return false
      end

      print("Unexpected response from API. Status code: ", res.status)
      return false
    end)
    auto_ssl:set("dir", "/tmp")


    auto_ssl:init()
  }

  init_worker_by_lua_block {
    auto_ssl:init_worker()
  }

  # HTTPS server
  server {
    listen 443 ssl;
    server_name ericsbookclub.com;

    # Dynamic handler for issuing or returning certs for SNI domains.
    ssl_certificate_by_lua_block {
      auto_ssl:ssl_certificate()
    }

    # You must still define a static ssl_certificate file for nginx to start.
    #
    # You may generate a self-signed fallback with:
    #
    # openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 \
    #   -subj '/CN=sni-support-required-for-valid-ssl' \
    #   -keyout /etc/ssl/resty-auto-ssl-fallback.key \
    #   -out /etc/ssl/resty-auto-ssl-fallback.crt
    ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
    ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;

    location / {
      ## Origin
      proxy_pass        http://proxyapp;

      ## Request Headers to Origin
      proxy_set_header  Host $host;
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  X-Forwarded-Proto $scheme;
      proxy_set_header  X-Forwarded-Ssl on; # Optional
      proxy_set_header  X-Forwarded-Port $server_port;
      proxy_set_header  X-Forwarded-Host $host;
      proxy_set_header  REMOTE_ADDR $host;

      ## Response Headers to Client
      add_header X-Cache-Status $upstream_cache_status;

      ## Proxy Timeouts
      send_timeout            5m;
      proxy_read_timeout      300;
      proxy_send_timeout      300;
      proxy_connect_timeout   300;

      ## Ignore these headers for Caching
      proxy_ignore_headers Set-Cookie;
      proxy_ignore_headers Cache-Control;

      proxy_redirect    off;
      proxy_next_upstream error timeout invalid_header http_502;
    }

    error_page 500 502 503 504 /500.html;
    keepalive_timeout 10;
  }

  # HTTP server
  server {
    listen 80;

    location / {
      proxy_pass        http://proxyapp;

      proxy_set_header  Host $host;
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  X-Forwarded-Proto $scheme;
      proxy_set_header  X-Forwarded-Port $server_port;
      proxy_set_header  X-Forwarded-Host $host;

      proxy_redirect    off;
      proxy_next_upstream error timeout invalid_header http_502;
    }

    #location ^~ /assets/ {
    #  gzip_static on;
    #  expires max;
    #  proxy_hide_header Set-Cookie;
    #  add_header Cache-Control public;
    #}

    # Endpoint used for performing domain verification with Let's Encrypt.
    location /.well-known/acme-challenge/ {
      content_by_lua_block {
        auto_ssl:challenge_server()
      }
    }
  }

  # Internal server running on port 8999 for handling certificate tasks.
  server {
    listen 127.0.0.1:8999;

    # Increase the body buffer size, to ensure the internal POSTs can always
    # parse the full POST contents into memory.
    client_body_buffer_size 128k;
    client_max_body_size 128k;

    location / {
      content_by_lua_block {
        auto_ssl:hook_server()
      }
    }
  }
}
